// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
        // Set x to zero if xz is true. Repeat with y and yz.
        Mux16(a=x, b[0..15]=false, sel=zx, out=xAfterZeroing);
        Mux16(a=y, b[0..15]=false, sel=zy, out=yAfterZeroing);

        // Negate x if nx is true, otherwise don't change it.
        Not16(in=xAfterZeroing, out=notXafterZeroing);
        Mux16(a=xAfterZeroing,  b=notXafterZeroing, sel=nx, out=xAfterNegation);

        // Negate y if ny is true, otherwise don't change it.
        Not16(in=yAfterZeroing, out=notYafterZeroing);
        Mux16(a=yAfterZeroing,  b=notYafterZeroing, sel=ny, out=yAfterNegation);

        // Compute x + y if f is true, otherwise compute x & y.
        Add16(a=xAfterNegation, b=yAfterNegation, out=aPlusB);
        And16(a=xAfterNegation, b=yAfterNegation, out=aAndB);
        Mux16(a=aAndB, b=aPlusB, sel=f, out=afterFunction);

        // Negate the output if no is true, otherwise don't change it.
        // Store it in result because we can't calculate zr and ng from the out pin.
        Not16(in=afterFunction, out=notAfterFunction);
        Mux16(a=afterFunction, b=notAfterFunction, sel=no, out=result);

        // If result is 0, set zr to true, otherwise false.
        // To save space we created an Or16To1 chip that returns true if any bit is true.
        Or16To1(in=result, out=isNonZero);
        Not(in=isNonZero, out=zr);

        // If result < 0, set ng to true, otherwise false.
        // Under two's complement the first bit (16th from right) is true if negative.
        // Can't subscript internal pins so can't use And(a=result[15], b=true, out=ng).
        And16(a=result, b[15]=true, out[15]=ng);

        // Finally, pass the result to the out pin.
        And16(a=result, b[0..15]=true, out=out);
}
